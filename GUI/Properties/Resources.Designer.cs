//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. (I WISH!)
// </auto-generated>
//------------------------------------------------------------------------------

namespace CKAN.GUI.Properties {
    using System;


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public Resources() { }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null))
                {
                    resourceMan = new SingleAssemblyResourceManager("CKAN.GUI.Properties.Resources", typeof(Resources).Assembly);
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap alert {
            get {
                object obj = ResourceManager.GetObject("alert", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap apply {
            get {
                object obj = ResourceManager.GetObject("apply", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap backward {
            get {
                object obj = ResourceManager.GetObject("backward", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        public static System.Drawing.Icon AppIcon {
            get {
                object obj = ResourceManager.GetObject("AppIcon", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to CKAN metadata (*.ckan)|*.ckan.
        /// </summary>
        public static string CKANFileFilter {
            get {
                return ResourceManager.GetString("CKANFileFilter", resourceCulture);
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to Export Mod List.
        /// </summary>
        public static string ExportInstalledModsDialogTitle {
            get {
                return ResourceManager.GetString("ExportInstalledModsDialogTitle", resourceCulture);
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap file {
            get {
                object obj = ResourceManager.GetObject("file", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap filter {
            get {
                object obj = ResourceManager.GetObject("filter", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap folder {
            get {
                object obj = ResourceManager.GetObject("folder", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap folderZip {
            get {
                object obj = ResourceManager.GetObject("folderZip", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap forward {
            get {
                object obj = ResourceManager.GetObject("forward", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap info {
            get {
                object obj = ResourceManager.GetObject("info", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ksp {
            get {
                object obj = ResourceManager.GetObject("ksp", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap stop {
            get {
                object obj = ResourceManager.GetObject("stop", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ballot {
            get {
                object obj = ResourceManager.GetObject("ballot", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap refresh {
            get {
                object obj = ResourceManager.GetObject("refresh", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap search {
            get {
                object obj = ResourceManager.GetObject("search", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap settings {
            get {
                object obj = ResourceManager.GetObject("settings", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap expandAll {
            get {
                object obj = ResourceManager.GetObject("expandAll", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap collapseAll {
            get {
                object obj = ResourceManager.GetObject("collapseAll", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap resetCollapse {
            get {
                object obj = ResourceManager.GetObject("resetCollapse", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap delete {
            get {
                object obj = ResourceManager.GetObject("delete", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap smile {
            get {
                object obj = ResourceManager.GetObject("smile", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap star {
            get {
                object obj = ResourceManager.GetObject("star", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap textClear {
            get {
                object obj = ResourceManager.GetObject("textClear", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap thumbup {
            get {
                object obj = ResourceManager.GetObject("thumbup", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap update {
            get {
                object obj = ResourceManager.GetObject("update", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap triToggleYes {
            get {
                object obj = ResourceManager.GetObject("triToggleYes", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap triToggleBoth {
            get {
                object obj = ResourceManager.GetObject("triToggleBoth", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap triToggleNo {
            get {
                object obj = ResourceManager.GetObject("triToggleNo", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }

        public static string AboutDialogLabel2Text {
            get { return (string)(ResourceManager.GetObject("AboutDialogLabel2Text", resourceCulture)); }
        }

        public static string BuildIDFilterDescription {
            get { return (string)(ResourceManager.GetObject("BuildIDFilterDescription", resourceCulture)); }
        }
        public static string CloneFakeKspDialogEnterName {
            get { return (string)(ResourceManager.GetObject("CloneFakeKspDialogEnterName", resourceCulture)); }
        }
        public static string CloneFakeKspDialogEnterPath {
            get { return (string)(ResourceManager.GetObject("CloneFakeKspDialogEnterPath", resourceCulture)); }
        }
        public static string CloneFakeKspDialogCloningInstance {
            get { return (string)(ResourceManager.GetObject("CloneFakeKspDialogCloningInstance", resourceCulture)); }
        }
        public static string CloneFakeKspDialogInstanceNotValid {
            get { return (string)(ResourceManager.GetObject("CloneFakeKspDialogInstanceNotValid", resourceCulture)); }
        }
        public static string CloneFakeKspDialogDestinationNotEmpty {
            get { return (string)(ResourceManager.GetObject("CloneFakeKspDialogDestinationNotEmpty", resourceCulture)); }
        }
        public static string CloneFakeKspDialogCloneFailed {
            get { return (string)(ResourceManager.GetObject("CloneFakeKspDialogCloneFailed", resourceCulture)); }
        }
        public static string CloneFakeKspDialogSuccessfulClone {
            get { return (string)(ResourceManager.GetObject("CloneFakeKspDialogSuccessfulClone", resourceCulture)); }
        }
        public static string CloneFakeKspDialogCreatingInstance {
            get { return (string)(ResourceManager.GetObject("CloneFakeKspDialogCreatingInstance", resourceCulture)); }
        }
        public static string CloneFakeKspDialogNameAlreadyUsed {
            get { return (string)(ResourceManager.GetObject("CloneFakeKspDialogNameAlreadyUsed", resourceCulture)); }
        }
        public static string CloneFakeKspDialogSuccessfulCreate {
            get { return (string)(ResourceManager.GetObject("CloneFakeKspDialogSuccessfulCreate", resourceCulture)); }
        }

        public static string CompatibleGameVersionsDialogNone {
            get { return (string)(ResourceManager.GetObject("CompatibleGameVersionsDialogNone", resourceCulture)); }
        }
        public static string CompatibleGameVersionsDialogGameUpdated {
            get { return (string)(ResourceManager.GetObject("CompatibleGameVersionsDialogGameUpdated", resourceCulture)); }
        }
        public static string CompatibleGameVersionsDialogVersionDetails {
            get { return (string)(ResourceManager.GetObject("CompatibleGameVersionsDialogVersionDetails", resourceCulture)); }
        }
        public static string CompatibleGameVersionsDialogInvalidFormat {
            get { return (string)(ResourceManager.GetObject("CompatibleGameVersionsDialogInvalidFormat", resourceCulture)); }
        }
        public static string CompatibleGameVersionsDialogErrorTitle {
            get { return (string)(ResourceManager.GetObject("CompatibleGameVersionsDialogErrorTitle", resourceCulture)); }
        }

        public static string ConfigurationParseError {
            get { return (string)(ResourceManager.GetObject("ConfigurationParseError", resourceCulture)); }
        }

        public static string GUIModNSlashA {
            get { return (string)(ResourceManager.GetObject("GUIModNSlashA", resourceCulture)); }
        }
        public static string GUIModUnknown {
            get { return (string)(ResourceManager.GetObject("GUIModUnknown", resourceCulture)); }
        }
        public static string GUIModMethodNotCKAN {
            get { return (string)(ResourceManager.GetObject("GUIModMethodNotCKAN", resourceCulture)); }
        }
        public static string GUIModGameCompatibilityLong {
            get { return (string)(ResourceManager.GetObject("GUIModGameCompatibilityLong", resourceCulture)); }
        }

        public static string MainAutoUpdateFailed {
            get { return (string)(ResourceManager.GetObject("MainAutoUpdateFailed", resourceCulture)); }
        }
        public static string MainQuitWithConflicts {
            get { return (string)(ResourceManager.GetObject("MainQuitWithConflicts", resourceCulture)); }
        }
        public static string MainQuit {
            get { return (string)(ResourceManager.GetObject("MainQuit", resourceCulture)); }
        }
        public static string MainGoBack {
            get { return (string)(ResourceManager.GetObject("MainGoBack", resourceCulture)); }
        }
        public static string MainQuitWithUnmetDeps {
            get { return (string)(ResourceManager.GetObject("MainQuitWithUnmetDeps", resourceCulture)); }
        }
        public static string MainQuitWithUnappliedChanges {
            get { return (string)(ResourceManager.GetObject("MainQuitWithUnappliedChanges", resourceCulture)); }
        }
        public static string MainUpgradingWaitTitle {
            get { return (string)(ResourceManager.GetObject("MainUpgradingWaitTitle", resourceCulture)); }
        }
        public static string MainUpgradingTo {
            get { return (string)(ResourceManager.GetObject("MainUpgradingTo", resourceCulture)); }
        }
        public static string MainDepNotSatisfied {
            get { return (string)(ResourceManager.GetObject("MainDepNotSatisfied", resourceCulture)); }
        }
        public static string MainFilterAll {
            get { return (string)(ResourceManager.GetObject("MainFilterAll", resourceCulture)); }
        }
        public static string MainFilterIncompatible {
            get { return (string)(ResourceManager.GetObject("MainFilterIncompatible", resourceCulture)); }
        }
        public static string MainFilterInstalled {
            get { return (string)(ResourceManager.GetObject("MainFilterInstalled", resourceCulture)); }
        }
        public static string MainFilterUpgradeable {
            get { return (string)(ResourceManager.GetObject("MainFilterUpgradeable", resourceCulture)); }
        }
        public static string MainFilterReplaceable {
            get { return (string)(ResourceManager.GetObject("MainFilterReplaceable", resourceCulture)); }
        }
        public static string MainFilterCached {
            get { return (string)(ResourceManager.GetObject("MainFilterCached", resourceCulture)); }
        }
        public static string MainFilterUncached {
            get { return (string)(ResourceManager.GetObject("MainFilterUncached", resourceCulture)); }
        }
        public static string MainFilterNew {
            get { return (string)(ResourceManager.GetObject("MainFilterNew", resourceCulture)); }
        }
        public static string MainFilterNotInstalled {
            get { return (string)(ResourceManager.GetObject("MainFilterNotInstalled", resourceCulture)); }
        }
        public static string MainFilterCompatible {
            get { return (string)(ResourceManager.GetObject("MainFilterCompatible", resourceCulture)); }
        }
        public static string MainFilterLabel {
            get { return (string)(ResourceManager.GetObject("MainFilterLabel", resourceCulture)); }
        }
        public static string MainFilterTag {
            get { return (string)(ResourceManager.GetObject("MainFilterTag", resourceCulture)); }
        }
        public static string MainFilterUntagged {
            get { return (string)(ResourceManager.GetObject("MainFilterUntagged", resourceCulture)); }
        }
        public static string MainLaunchWithIncompatible {
            get { return (string)(ResourceManager.GetObject("MainLaunchWithIncompatible", resourceCulture)); }
        }
        public static string MainLaunchDontShow {
            get { return (string)(ResourceManager.GetObject("MainLaunchDontShow", resourceCulture)); }
        }
        public static string MainLaunch {
            get { return (string)(ResourceManager.GetObject("MainLaunch", resourceCulture)); }
        }
        public static string MainLaunchFailed {
            get { return (string)(ResourceManager.GetObject("MainLaunchFailed", resourceCulture)); }
        }
        public static string MainModPack {
            get { return (string)(ResourceManager.GetObject("MainModPack", resourceCulture)); }
        }
        public static string MainPlainText {
            get { return (string)(ResourceManager.GetObject("MainPlainText", resourceCulture)); }
        }
        public static string MainMarkdown {
            get { return (string)(ResourceManager.GetObject("MainMarkdown", resourceCulture)); }
        }
        public static string MainBBCode {
            get { return (string)(ResourceManager.GetObject("MainBBCode", resourceCulture)); }
        }
        public static string MainCSV {
            get { return (string)(ResourceManager.GetObject("MainCSV", resourceCulture)); }
        }
        public static string MainTSV {
            get { return (string)(ResourceManager.GetObject("MainTSV", resourceCulture)); }
        }
        public static string MainNotFound {
            get { return (string)(ResourceManager.GetObject("MainNotFound", resourceCulture)); }
        }
        public static string MainCantInstallDLC {
            get { return (string)(ResourceManager.GetObject("MainCantInstallDLC", resourceCulture)); }
        }
        public static string MainLoadingGameInstance {
            get { return (string)(ResourceManager.GetObject("MainLoadingGameInstance", resourceCulture)); }
        }
        public static string MainCorruptedRegistry {
            get { return (string)(ResourceManager.GetObject("MainCorruptedRegistry", resourceCulture)); }
        }
        public static string MainDeleteLockfileYes {
            get { return (string)(ResourceManager.GetObject("MainDeleteLockfileYes", resourceCulture)); }
        }
        public static string MainDeleteLockfileNo {
            get { return (string)(ResourceManager.GetObject("MainDeleteLockfileNo", resourceCulture)); }
        }

        public static string AllModVersionsInstallPrompt {
            get { return (string)(ResourceManager.GetObject("AllModVersionsInstallPrompt", resourceCulture)); }
        }
        public static string ModpackInstallIncompatiblePrompt {
            get { return (string)(ResourceManager.GetObject("ModpackInstallIncompatiblePrompt", resourceCulture)); }
        }
        public static string AllModVersionsInstallYes {
            get { return (string)(ResourceManager.GetObject("AllModVersionsInstallYes", resourceCulture)); }
        }
        public static string AllModVersionsInstallNo {
            get { return (string)(ResourceManager.GetObject("AllModVersionsInstallNo", resourceCulture)); }
        }

        public static string MainChangesetUpdateSelected {
            get { return (string)(ResourceManager.GetObject("MainChangesetUpdateSelected", resourceCulture)); }
        }
        public static string MainChangesetReinstall {
            get { return (string)(ResourceManager.GetObject("MainChangesetReinstall", resourceCulture)); }
        }
        public static string MainChangesetUserReinstall {
            get { return (string)(ResourceManager.GetObject("MainChangesetUserReinstall", resourceCulture)); }
        }

        public static string MainImportTitle {
            get { return (string)(ResourceManager.GetObject("MainImportTitle", resourceCulture)); }
        }
        public static string MainImportFilter {
            get { return (string)(ResourceManager.GetObject("MainImportFilter", resourceCulture)); }
        }
        public static string MainImportWaitTitle {
            get { return (string)(ResourceManager.GetObject("MainImportWaitTitle", resourceCulture)); }
        }

        public static string MainInstallWaitTitle {
            get { return (string)(ResourceManager.GetObject("MainInstallWaitTitle", resourceCulture)); }
        }
        public static string MainInstallDepNotSatisfied {
            get { return (string)(ResourceManager.GetObject("MainInstallDepNotSatisfied", resourceCulture)); }
        }
        public static string MainInstallNotFound {
            get { return (string)(ResourceManager.GetObject("MainInstallNotFound", resourceCulture)); }
        }
        public static string MainInstallBadMetadata {
            get { return (string)(ResourceManager.GetObject("MainInstallBadMetadata", resourceCulture)); }
        }
        public static string MainInstallFileExists {
            get { return (string)(ResourceManager.GetObject("MainInstallFileExists", resourceCulture)); }
        }
        public static string MainInstallUnownedFileExists {
            get { return (string)(ResourceManager.GetObject("MainInstallUnownedFileExists", resourceCulture)); }
        }
        public static string MainInstallGameDataReverted {
            get { return (string)(ResourceManager.GetObject("MainInstallGameDataReverted", resourceCulture)); }
        }
        public static string MainInstallOpenSettingsPrompt {
            get { return (string)(ResourceManager.GetObject("MainInstallOpenSettingsPrompt", resourceCulture)); }
        }
        public static string MainInstallOpenSettings {
            get { return (string)(ResourceManager.GetObject("MainInstallOpenSettings", resourceCulture)); }
        }
        public static string MainInstallNo {
            get { return (string)(ResourceManager.GetObject("MainInstallNo", resourceCulture)); }
        }
        public static string MainInstallModSuccess {
            get { return (string)(ResourceManager.GetObject("MainInstallModSuccess", resourceCulture)); }
        }
        public static string MainInstallSuccess {
            get { return (string)(ResourceManager.GetObject("MainInstallSuccess", resourceCulture)); }
        }
        public static string MainInstallCancelTooLate {
            get { return (string)(ResourceManager.GetObject("MainInstallCancelTooLate", resourceCulture)); }
        }
        public static string MainInstallCancelAfterInstall {
            get { return (string)(ResourceManager.GetObject("MainInstallCancelAfterInstall", resourceCulture)); }
        }
        public static string MainInstallProcessComplete {
            get { return (string)(ResourceManager.GetObject("MainInstallProcessComplete", resourceCulture)); }
        }
        public static string MainInstallProcessCanceled {
            get { return (string)(ResourceManager.GetObject("MainInstallProcessCanceled", resourceCulture)); }
        }
        public static string MainInstallCanceledManually {
            get { return (string)(ResourceManager.GetObject("MainInstallCanceledManually", resourceCulture)); }
        }
        public static string MainInstallInstallCanceled {
            get { return (string)(ResourceManager.GetObject("MainInstallInstallCanceled", resourceCulture)); }
        }
        public static string MainInstallErrorInstalling {
            get { return (string)(ResourceManager.GetObject("MainInstallErrorInstalling", resourceCulture)); }
        }
        public static string MainInstallUnknownError {
            get { return (string)(ResourceManager.GetObject("MainInstallUnknownError", resourceCulture)); }
        }
        public static string MainInstallKnownError {
            get { return (string)(ResourceManager.GetObject("MainInstallKnownError", resourceCulture)); }
        }
        public static string MainInstallFailed {
            get { return (string)(ResourceManager.GetObject("MainInstallFailed", resourceCulture)); }
        }
        public static string MainInstallProvidedBy {
            get { return (string)(ResourceManager.GetObject("MainInstallProvidedBy", resourceCulture)); }
        }
        public static string MainInstallCantInstallDLC {
            get { return (string)(ResourceManager.GetObject("MainInstallCantInstallDLC", resourceCulture)); }
        }

        public static string ModInfoNSlashA {
            get { return (string)(ResourceManager.GetObject("ModInfoNSlashA", resourceCulture)); }
        }
        public static string ModInfoVirtual {
            get { return (string)(ResourceManager.GetObject("ModInfoVirtual", resourceCulture)); }
        }
        public static string ModInfoNotIndexed {
            get { return (string)(ResourceManager.GetObject("ModInfoNotIndexed", resourceCulture)); }
        }
        public static string ModInfoNotCached {
            get { return (string)(ResourceManager.GetObject("ModInfoNotCached", resourceCulture)); }
        }
        public static string ModInfoCached {
            get { return (string)(ResourceManager.GetObject("ModInfoCached", resourceCulture)); }
        }
        public static string ModInfoNoDownload {
            get { return (string)(ResourceManager.GetObject("ModInfoNoDownload", resourceCulture)); }
        }
        public static string ModInfoHomepageLabel {
            get { return (string)(ResourceManager.GetObject("ModInfoHomepageLabel", resourceCulture)); }
        }
        public static string ModInfoSpaceDockLabel {
            get { return (string)(ResourceManager.GetObject("ModInfoSpaceDockLabel", resourceCulture)); }
        }
        public static string ModInfoCurseLabel {
            get { return (string)(ResourceManager.GetObject("ModInfoCurseLabel", resourceCulture)); }
        }
        public static string ModInfoRepositoryLabel {
            get { return (string)(ResourceManager.GetObject("ModInfoRepositoryLabel", resourceCulture)); }
        }
        public static string ModInfoBugTrackerLabel {
            get { return (string)(ResourceManager.GetObject("ModInfoBugTrackerLabel", resourceCulture)); }
        }
        public static string ModInfoContinuousIntegrationLabel {
            get { return (string)(ResourceManager.GetObject("ModInfoContinuousIntegrationLabel", resourceCulture)); }
        }
        public static string ModInfoLicenseLabel {
            get { return (string)(ResourceManager.GetObject("ModInfoLicenseLabel", resourceCulture)); }
        }
        public static string ModInfoManualLabel {
            get { return (string)(ResourceManager.GetObject("ModInfoManualLabel", resourceCulture)); }
        }
        public static string ModInfoMetanetkanLabel {
            get { return (string)(ResourceManager.GetObject("ModInfoMetanetkanLabel", resourceCulture)); }
        }
        public static string ModInfoRemoteAvcLabel {
            get { return (string)(ResourceManager.GetObject("ModInfoRemoteAvcLabel", resourceCulture)); }
        }
        public static string ModInfoRemoteSWInfoLabel {
            get { return (string)(ResourceManager.GetObject("ModInfoRemoteSWInfoLabel", resourceCulture)); }
        }
        public static string ModInfoStoreLabel {
            get { return (string)(ResourceManager.GetObject("ModInfoStoreLabel", resourceCulture)); }
        }
        public static string ModInfoSteamStoreLabel {
            get { return (string)(ResourceManager.GetObject("ModInfoSteamStoreLabel", resourceCulture)); }
        }
        public static string ModInfoToolTipReverseRelationships {
            get { return (string)(ResourceManager.GetObject("ModInfoToolTipReverseRelationships", resourceCulture)); }
        }
        public static string DownloadFailed {
            get { return (string)(ResourceManager.GetObject("DownloadFailed", resourceCulture)); }
        }
        public static string ValidatingDownload {
            get { return (string)(ResourceManager.GetObject("ValidatingDownload", resourceCulture)); }
        }

        public static string MainModListWaitTitle {
            get { return (string)(ResourceManager.GetObject("MainModListWaitTitle", resourceCulture)); }
        }
        public static string MainModListLoadingRegistry {
            get { return (string)(ResourceManager.GetObject("MainModListLoadingRegistry", resourceCulture)); }
        }
        public static string MainModListLoadingInstalled {
            get { return (string)(ResourceManager.GetObject("MainModListLoadingInstalled", resourceCulture)); }
        }
        public static string MainModListLoadingAvailable {
            get { return (string)(ResourceManager.GetObject("MainModListLoadingAvailable", resourceCulture)); }
        }
        public static string MainModListLoadingIncompatible {
            get { return (string)(ResourceManager.GetObject("MainModListLoadingIncompatible", resourceCulture)); }
        }
        public static string MainModListRestoringChangeset {
            get { return (string)(ResourceManager.GetObject("MainModListRestoringChangeset", resourceCulture)); }
        }
        public static string MainModListPreservingNew {
            get { return (string)(ResourceManager.GetObject("MainModListPreservingNew", resourceCulture)); }
        }
        public static string MainModListPopulatingList {
            get { return (string)(ResourceManager.GetObject("MainModListPopulatingList", resourceCulture)); }
        }
        public static string MainModListUpdatingFilters {
            get { return (string)(ResourceManager.GetObject("MainModListUpdatingFilters", resourceCulture)); }
        }
        public static string MainModListCompatible {
            get { return (string)(ResourceManager.GetObject("MainModListCompatible", resourceCulture)); }
        }
        public static string MainModListInstalled {
            get { return (string)(ResourceManager.GetObject("MainModListInstalled", resourceCulture)); }
        }
        public static string MainModListUpgradeable {
            get { return (string)(ResourceManager.GetObject("MainModListUpgradeable", resourceCulture)); }
        }
        public static string MainModListReplaceable {
            get { return (string)(ResourceManager.GetObject("MainModListReplaceable", resourceCulture)); }
        }
        public static string MainModListCached {
            get { return (string)(ResourceManager.GetObject("MainModListCached", resourceCulture)); }
        }
        public static string MainModListUncached {
            get { return (string)(ResourceManager.GetObject("MainModListUncached", resourceCulture)); }
        }
        public static string MainModListNewlyCompatible {
            get { return (string)(ResourceManager.GetObject("MainModListNewlyCompatible", resourceCulture)); }
        }
        public static string MainModListNotInstalled {
            get { return (string)(ResourceManager.GetObject("MainModListNotInstalled", resourceCulture)); }
        }
        public static string MainModListIncompatible {
            get { return (string)(ResourceManager.GetObject("MainModListIncompatible", resourceCulture)); }
        }
        public static string MainModListAll {
            get { return (string)(ResourceManager.GetObject("MainModListAll", resourceCulture)); }
        }
        public static string MainModListUpdatingTray {
            get { return (string)(ResourceManager.GetObject("MainModListUpdatingTray", resourceCulture)); }
        }
        public static string MainModListAutoDetected {
            get { return (string)(ResourceManager.GetObject("MainModListAutoDetected", resourceCulture)); }
        }
        public static string MainModListAutoInstalledToolTip {
            get { return (string)(ResourceManager.GetObject("MainModListAutoInstalledToolTip", resourceCulture)); }
        }
        public static string MainModListUnknownFilter {
            get { return (string)(ResourceManager.GetObject("MainModListUnknownFilter", resourceCulture)); }
        }

        public static string MainRecommendationsTitle {
            get { return (string)(ResourceManager.GetObject("MainRecommendationsTitle", resourceCulture)); }
        }
        public static string MainRecommendationsNoneFound {
            get { return (string)(ResourceManager.GetObject("MainRecommendationsNoneFound", resourceCulture)); }
        }

        public static string MainRepoWaitTitle {
            get { return (string)(ResourceManager.GetObject("MainRepoWaitTitle", resourceCulture)); }
        }
        public static string MainRepoContacting {
            get { return (string)(ResourceManager.GetObject("MainRepoContacting", resourceCulture)); }
        }
        public static string LoadingCachedRepoData {
            get { return (string)(ResourceManager.GetObject("LoadingCachedRepoData", resourceCulture)); }
        }
        public static string MainRepoScanning {
            get { return (string)(ResourceManager.GetObject("MainRepoScanning", resourceCulture)); }
        }
        public static string MainRepoUpdating {
            get { return (string)(ResourceManager.GetObject("MainRepoUpdating", resourceCulture)); }
        }
        public static string MainRepoFailedToConnect {
            get { return (string)(ResourceManager.GetObject("MainRepoFailedToConnect", resourceCulture)); }
        }
        public static string MainRepoUpToDate {
            get { return (string)(ResourceManager.GetObject("MainRepoUpToDate", resourceCulture)); }
        }
        public static string MainRepoFailed {
            get { return (string)(ResourceManager.GetObject("MainRepoFailed", resourceCulture)); }
        }
        public static string MainRepoSuccess {
            get { return (string)(ResourceManager.GetObject("MainRepoSuccess", resourceCulture)); }
        }
        public static string MainRepoAutoRefreshPrompt {
            get { return (string)(ResourceManager.GetObject("MainRepoAutoRefreshPrompt", resourceCulture)); }
        }
        public static string MainRepoBalloonTipDetails {
            get { return (string)(ResourceManager.GetObject("MainRepoBalloonTipDetails", resourceCulture)); }
        }
        public static string MainRepoBalloonTipTooltip {
            get { return (string)(ResourceManager.GetObject("MainRepoBalloonTipTooltip", resourceCulture)); }
        }

        public static string MainTrayIconResume {
            get { return (string)(ResourceManager.GetObject("MainTrayIconResume", resourceCulture)); }
        }
        public static string MainTrayIconPause {
            get { return (string)(ResourceManager.GetObject("MainTrayIconPause", resourceCulture)); }
        }
        public static string MainTrayNoUpdates {
            get { return (string)(ResourceManager.GetObject("MainTrayNoUpdates", resourceCulture)); }
        }
        public static string MainTrayUpdatesAvailable {
            get { return (string)(ResourceManager.GetObject("MainTrayUpdatesAvailable", resourceCulture)); }
        }
        public static string MainWaitPleaseWait {
            get { return (string)(ResourceManager.GetObject("MainWaitPleaseWait", resourceCulture)); }
        }
        public static string MainWaitDone {
            get { return (string)(ResourceManager.GetObject("MainWaitDone", resourceCulture)); }
        }

        public static string ManageGameInstancesNotValid {
            get { return (string)(ResourceManager.GetObject("ManageGameInstancesNotValid", resourceCulture)); }
        }

        public static string ManageGameInstancesDirectoryDeleted {
            get { return (string)(ResourceManager.GetObject("ManageGameInstancesDirectoryDeleted", resourceCulture)); }
        }

        public static string ManageGameInstancesNameColumnInvalid {
            get { return (string)(ResourceManager.GetObject("ManageGameInstancesNameColumnInvalid", resourceCulture)); }
        }
        public static string ManageGameInstancesNameColumnLocked {
            get { return (string)(ResourceManager.GetObject("ManageGameInstancesNameColumnLocked", resourceCulture)); }
        }

        public static string NewRepoDialogFailed {
            get { return (string)(ResourceManager.GetObject("NewRepoDialogFailed", resourceCulture)); }
        }

        public static string PluginsDialogFilter {
            get { return (string)(ResourceManager.GetObject("PluginsDialogFilter", resourceCulture)); }
        }

        public static string SettingsDialogSummmary {
            get { return (string)(ResourceManager.GetObject("SettingsDialogSummmary", resourceCulture)); }
        }
        public static string SettingsDialogSummaryInvalid {
            get { return (string)(ResourceManager.GetObject("SettingsDialogSummaryInvalid", resourceCulture)); }
        }
        public static string SettingsDialogCacheDescrip {
            get { return (string)(ResourceManager.GetObject("SettingsDialogCacheDescrip", resourceCulture)); }
        }
        public static string SettingsDialogDeleteConfirm {
            get { return (string)(ResourceManager.GetObject("SettingsDialogDeleteConfirm", resourceCulture)); }
        }
        public static string SettingsDialogRepoDeleteConfirm {
            get { return (string)(ResourceManager.GetObject("SettingsDialogRepoDeleteConfirm", resourceCulture)); }
        }
        public static string SettingsDialogRepoDeleteDelete {
            get { return (string)(ResourceManager.GetObject("SettingsDialogRepoDeleteDelete", resourceCulture)); }
        }
        public static string SettingsDialogRepoDeleteCancel {
            get { return (string)(ResourceManager.GetObject("SettingsDialogRepoDeleteCancel", resourceCulture)); }
        }
        public static string SettingsDialogRepoAddDuplicateURL {
            get { return (string)(ResourceManager.GetObject("SettingsDialogRepoAddDuplicateURL", resourceCulture)); }
        }
        public static string SettingsDialogUpdateFailed {
            get { return (string)(ResourceManager.GetObject("SettingsDialogUpdateFailed", resourceCulture)); }
        }

        public static string AddAuthTokenTitle {
            get { return (string)(ResourceManager.GetObject("AddAuthTokenTitle", resourceCulture)); }
        }
        public static string AddAuthTokenHost {
            get { return (string)(ResourceManager.GetObject("AddAuthTokenHost", resourceCulture)); }
        }
        public static string AddAuthTokenToken {
            get { return (string)(ResourceManager.GetObject("AddAuthTokenToken", resourceCulture)); }
        }
        public static string AddAuthTokenAccept {
            get { return (string)(ResourceManager.GetObject("AddAuthTokenAccept", resourceCulture)); }
        }
        public static string AddAuthTokenCancel {
            get { return (string)(ResourceManager.GetObject("AddAuthTokenCancel", resourceCulture)); }
        }
        public static string AddAuthTokenHostRequired {
            get { return (string)(ResourceManager.GetObject("AddAuthTokenHostRequired", resourceCulture)); }
        }
        public static string AddAuthTokenTokenRequired {
            get { return (string)(ResourceManager.GetObject("AddAuthTokenTokenRequired", resourceCulture)); }
        }
        public static string AddAuthTokenInvalidHost {
            get { return (string)(ResourceManager.GetObject("AddAuthTokenInvalidHost", resourceCulture)); }
        }
        public static string AddAuthTokenDupHost {
            get { return (string)(ResourceManager.GetObject("AddAuthTokenDupHost", resourceCulture)); }
        }

        public static string URLHandlersPrompt {
            get { return (string)(ResourceManager.GetObject("URLHandlersPrompt", resourceCulture)); }
        }

        public static string UtilCopyLink {
            get { return (string)(ResourceManager.GetObject("UtilCopyLink", resourceCulture)); }
        }

        public static string StatusInstanceLabelText {
            get { return (string)(ResourceManager.GetObject("StatusInstanceLabelText", resourceCulture)); }
        }
        public static string StatusInstanceLabelTextWithPlayTime {
            get { return (string)(ResourceManager.GetObject("StatusInstanceLabelTextWithPlayTime", resourceCulture)); }
        }
        public static string ModuleLabelListFavourites {
            get { return (string)(ResourceManager.GetObject("ModuleLabelListFavourites", resourceCulture)); }
        }
        public static string ModuleLabelListHidden {
            get { return (string)(ResourceManager.GetObject("ModuleLabelListHidden", resourceCulture)); }
        }
        public static string ModuleLabelListHeld {
            get { return (string)(ResourceManager.GetObject("ModuleLabelListHeld", resourceCulture)); }
        }
        public static string ModuleLabelListGlobal {
            get { return (string)(ResourceManager.GetObject("ModuleLabelListGlobal", resourceCulture)); }
        }
        public static string EditLabelsDialogConfirmDelete {
            get { return (string)(ResourceManager.GetObject("EditLabelsDialogConfirmDelete", resourceCulture)); }
        }
        public static string EditLabelsDialogSavePrompt {
            get { return (string)(ResourceManager.GetObject("EditLabelsDialogSavePrompt", resourceCulture)); }
        }
        public static string EditLabelsDialogNoRecord {
            get { return (string)(ResourceManager.GetObject("EditLabelsDialogNoRecord", resourceCulture)); }
        }
        public static string EditLabelsDialogNameRequired {
            get { return (string)(ResourceManager.GetObject("EditLabelsDialogNameRequired", resourceCulture)); }
        }
        public static string EditLabelsDialogAlreadyExists {
            get { return (string)(ResourceManager.GetObject("EditLabelsDialogAlreadyExists", resourceCulture)); }
        }
        public static string EditLabelsDialogDelete {
            get { return (string)(ResourceManager.GetObject("EditLabelsDialogDelete", resourceCulture)); }
        }
        public static string EditLabelsDialogCancel {
            get { return (string)(ResourceManager.GetObject("EditLabelsDialogCancel", resourceCulture)); }
        }
        public static string EditLabelsDialogSave {
            get { return (string)(ResourceManager.GetObject("EditLabelsDialogSave", resourceCulture)); }
        }
        public static string EditLabelsDialogDiscard {
            get { return (string)(ResourceManager.GetObject("EditLabelsDialogDiscard", resourceCulture)); }
        }
        public static string MainChangesetWarningInstallingModuleWithLabel {
            get { return (string)(ResourceManager.GetObject("MainChangesetWarningInstallingModuleWithLabel", resourceCulture)); }
        }
        public static string EditLabelsToolTipName {
            get { return (string)(ResourceManager.GetObject("EditLabelsToolTipName", resourceCulture)); }
        }
        public static string EditLabelsToolTipColor {
            get { return (string)(ResourceManager.GetObject("EditLabelsToolTipColor", resourceCulture)); }
        }
        public static string EditLabelsToolTipInstance {
            get { return (string)(ResourceManager.GetObject("EditLabelsToolTipInstance", resourceCulture)); }
        }
        public static string EditLabelsToolTipHide {
            get { return (string)(ResourceManager.GetObject("EditLabelsToolTipHide", resourceCulture)); }
        }
        public static string EditLabelsToolTipNotifyOnChanges {
            get { return (string)(ResourceManager.GetObject("EditLabelsToolTipNotifyOnChanges", resourceCulture)); }
        }
        public static string EditLabelsToolTipRemoveOnChanges {
            get { return (string)(ResourceManager.GetObject("EditLabelsToolTipRemoveOnChanges", resourceCulture)); }
        }
        public static string EditLabelsToolTipAlertOnInstall {
            get { return (string)(ResourceManager.GetObject("EditLabelsToolTipAlertOnInstall", resourceCulture)); }
        }
        public static string EditLabelsToolTipRemoveOnInstall {
            get { return (string)(ResourceManager.GetObject("EditLabelsToolTipRemoveOnInstall", resourceCulture)); }
        }
        public static string EditLabelsToolTipHoldVersion {
            get { return (string)(ResourceManager.GetObject("EditLabelsToolTipHoldVersion", resourceCulture)); }
        }
        public static string EditLabelsToolTipMoveUp {
            get { return (string)(ResourceManager.GetObject("EditLabelsToolTipMoveUp", resourceCulture)); }
        }
        public static string EditLabelsToolTipMoveDown {
            get { return (string)(ResourceManager.GetObject("EditLabelsToolTipMoveDown", resourceCulture)); }
        }
        public static string MainLabelsUpdateMessage {
            get { return (string)(ResourceManager.GetObject("MainLabelsUpdateMessage", resourceCulture)); }
        }
        public static string MainLabelsUpdateTitle {
            get { return (string)(ResourceManager.GetObject("MainLabelsUpdateTitle", resourceCulture)); }
        }
        public static string MainLabelsUntagged {
            get { return (string)(ResourceManager.GetObject("MainLabelsUntagged", resourceCulture)); }
        }

        public static string EditModpackBadIdentifier {
            get { return (string)(ResourceManager.GetObject("EditModpackBadIdentifier", resourceCulture)); }
        }
        public static string EditModpackBadName {
            get { return (string)(ResourceManager.GetObject("EditModpackBadName", resourceCulture)); }
        }
        public static string EditModpackBadVersion {
            get { return (string)(ResourceManager.GetObject("EditModpackBadVersion", resourceCulture)); }
        }
        public static string EditModpackBadGameVersions {
            get { return (string)(ResourceManager.GetObject("EditModpackBadGameVersions", resourceCulture)); }
        }
        public static string EditModpackTooltipIdentifier {
            get { return (string)(ResourceManager.GetObject("EditModpackTooltipIdentifier", resourceCulture)); }
        }
        public static string EditModpackTooltipName {
            get { return (string)(ResourceManager.GetObject("EditModpackTooltipName", resourceCulture)); }
        }
        public static string EditModpackTooltipAbstract {
            get { return (string)(ResourceManager.GetObject("EditModpackTooltipAbstract", resourceCulture)); }
        }
        public static string EditModpackTooltipVersion {
            get { return (string)(ResourceManager.GetObject("EditModpackTooltipVersion", resourceCulture)); }
        }
        public static string EditModpackTooltipGameVersionMin {
            get { return (string)(ResourceManager.GetObject("EditModpackTooltipGameVersionMin", resourceCulture)); }
        }
        public static string EditModpackTooltipGameVersionMax {
            get { return (string)(ResourceManager.GetObject("EditModpackTooltipGameVersionMax", resourceCulture)); }
        }
        public static string EditModpackTooltipLicense {
            get { return (string)(ResourceManager.GetObject("EditModpackTooltipLicense", resourceCulture)); }
        }
        public static string EditModpackTooltipIncludeVersions {
            get { return (string)(ResourceManager.GetObject("EditModpackTooltipIncludeVersions", resourceCulture)); }
        }
        public static string EditModpackTooltipDepends {
            get { return (string)(ResourceManager.GetObject("EditModpackTooltipDepends", resourceCulture)); }
        }
        public static string EditModpackTooltipRecommends {
            get { return (string)(ResourceManager.GetObject("EditModpackTooltipRecommends", resourceCulture)); }
        }
        public static string EditModpackTooltipSuggests {
            get { return (string)(ResourceManager.GetObject("EditModpackTooltipSuggests", resourceCulture)); }
        }
        public static string EditModpackTooltipIgnore {
            get { return (string)(ResourceManager.GetObject("EditModpackTooltipIgnore", resourceCulture)); }
        }
        public static string EditModpackTooltipCancel {
            get { return (string)(ResourceManager.GetObject("EditModpackTooltipCancel", resourceCulture)); }
        }
        public static string EditModpackTooltipExport {
            get { return (string)(ResourceManager.GetObject("EditModpackTooltipExport", resourceCulture)); }
        }

        public static string TriStateToggleYesTooltip {
            get { return (string)(ResourceManager.GetObject("TriStateToggleYesTooltip", resourceCulture)); }
        }
        public static string TriStateToggleBothTooltip {
            get { return (string)(ResourceManager.GetObject("TriStateToggleBothTooltip", resourceCulture)); }
        }
        public static string TriStateToggleNoTooltip {
            get { return (string)(ResourceManager.GetObject("TriStateToggleNoTooltip", resourceCulture)); }
        }

        public static string ModSearchDescriptionPrefix {
            get { return (string)(ResourceManager.GetObject("ModSearchDescriptionPrefix", resourceCulture)); }
        }
        public static string ModSearchLanguagePrefix {
            get { return (string)(ResourceManager.GetObject("ModSearchLanguagePrefix", resourceCulture)); }
        }
        public static string ModSearchDependsPrefix {
            get { return (string)(ResourceManager.GetObject("ModSearchDependsPrefix", resourceCulture)); }
        }
        public static string ModSearchRecommendsPrefix {
            get { return (string)(ResourceManager.GetObject("ModSearchRecommendsPrefix", resourceCulture)); }
        }
        public static string ModSearchSuggestsPrefix {
            get { return (string)(ResourceManager.GetObject("ModSearchSuggestsPrefix", resourceCulture)); }
        }
        public static string ModSearchConflictsPrefix {
            get { return (string)(ResourceManager.GetObject("ModSearchConflictsPrefix", resourceCulture)); }
        }
        public static string ModSearchTagPrefix {
            get { return (string)(ResourceManager.GetObject("ModSearchTagPrefix", resourceCulture)); }
        }
        public static string ModSearchLabelPrefix {
            get { return (string)(ResourceManager.GetObject("ModSearchLabelPrefix", resourceCulture)); }
        }
        public static string ModSearchYesPrefix {
            get { return (string)(ResourceManager.GetObject("ModSearchYesPrefix", resourceCulture)); }
        }
        public static string ModSearchNoPrefix {
            get { return (string)(ResourceManager.GetObject("ModSearchNoPrefix", resourceCulture)); }
        }
        public static string ModSearchCompatibleSuffix {
            get { return (string)(ResourceManager.GetObject("ModSearchCompatibleSuffix", resourceCulture)); }
        }
        public static string ModSearchInstalledSuffix {
            get { return (string)(ResourceManager.GetObject("ModSearchInstalledSuffix", resourceCulture)); }
        }
        public static string ModSearchCachedSuffix {
            get { return (string)(ResourceManager.GetObject("ModSearchCachedSuffix", resourceCulture)); }
        }
        public static string ModSearchNewlyCompatibleSuffix {
            get { return (string)(ResourceManager.GetObject("ModSearchNewlyCompatibleSuffix", resourceCulture)); }
        }
        public static string ModSearchUpgradeableSuffix {
            get { return (string)(ResourceManager.GetObject("ModSearchUpgradeableSuffix", resourceCulture)); }
        }
        public static string ModSearchReplaceableSuffix {
            get { return (string)(ResourceManager.GetObject("ModSearchReplaceableSuffix", resourceCulture)); }
        }
        public static string EditModSearchTooltipExpandButton {
            get { return (string)(ResourceManager.GetObject("EditModSearchTooltipExpandButton", resourceCulture)); }
        }
        public static string EditModSearchesTooltipAddSearchButton {
            get { return (string)(ResourceManager.GetObject("EditModSearchesTooltipAddSearchButton", resourceCulture)); }
        }

        public static string ManageModsInstallAllCheckboxTooltip {
            get { return (string)(ResourceManager.GetObject("ManageModsInstallAllCheckboxTooltip", resourceCulture)); }
        }

        public static string TotalPlayTime {
            get { return (string)(ResourceManager.GetObject("TotalPlayTime", resourceCulture)); }
        }

        public static string ChangeTypeNone {
            get { return (string)(ResourceManager.GetObject("ChangeTypeNone", resourceCulture)); }
        }
        public static string ChangeTypeInstall {
            get { return (string)(ResourceManager.GetObject("ChangeTypeInstall", resourceCulture)); }
        }
        public static string ChangeTypeRemove {
            get { return (string)(ResourceManager.GetObject("ChangeTypeRemove", resourceCulture)); }
        }
        public static string ChangeTypeUpdate {
            get { return (string)(ResourceManager.GetObject("ChangeTypeUpdate", resourceCulture)); }
        }
        public static string ChangeTypeReplace {
            get { return (string)(ResourceManager.GetObject("ChangeTypeReplace", resourceCulture)); }
        }

        public static string ModDownloadsFailedMessage {
            get { return (string)(ResourceManager.GetObject("ModDownloadsFailedMessage", resourceCulture)); }
        }
        public static string ModDownloadsFailedColHdr {
            get { return (string)(ResourceManager.GetObject("ModDownloadsFailedColHdr", resourceCulture)); }
        }
        public static string ModDownloadsFailedAbortBtn {
            get { return (string)(ResourceManager.GetObject("ModDownloadsFailedAbortBtn", resourceCulture)); }
        }

        public static string RepoDownloadsFailedMessage {
            get { return (string)(ResourceManager.GetObject("RepoDownloadsFailedMessage", resourceCulture)); }
        }
        public static string RepoDownloadsFailedColHdr {
            get { return (string)(ResourceManager.GetObject("RepoDownloadsFailedColHdr", resourceCulture)); }
        }
        public static string RepoDownloadsFailedAbortBtn {
            get { return (string)(ResourceManager.GetObject("RepoDownloadsFailedAbortBtn", resourceCulture)); }
        }

        public static string RelationshipTypeProvides {
            get { return (string)(ResourceManager.GetObject("RelationshipTypeProvides", resourceCulture)); }
        }
        public static string RelationshipTypeDepends {
            get { return (string)(ResourceManager.GetObject("RelationshipTypeDepends", resourceCulture)); }
        }
        public static string RelationshipTypeRecommends {
            get { return (string)(ResourceManager.GetObject("RelationshipTypeRecommends", resourceCulture)); }
        }
        public static string RelationshipTypeSuggests {
            get { return (string)(ResourceManager.GetObject("RelationshipTypeSuggests", resourceCulture)); }
        }
        public static string RelationshipTypeSupports {
            get { return (string)(ResourceManager.GetObject("RelationshipTypeSupports", resourceCulture)); }
        }
        public static string RelationshipTypeConflicts {
            get { return (string)(ResourceManager.GetObject("RelationshipTypeConflicts", resourceCulture)); }
        }

        public static string AuthorSearchName {
            get { return (string)(ResourceManager.GetObject("AuthorSearchName", resourceCulture)); }
        }
        public static string FilterLinkToolTip {
            get { return (string)(ResourceManager.GetObject("FilterLinkToolTip", resourceCulture)); }
        }

        public static string FolderContainsManagedFiles {
            get { return (string)(ResourceManager.GetObject("FolderContainsManagedFiles", resourceCulture)); }
        }
        public static string DeleteUnmanagedFileConfirmation {
            get { return (string)(ResourceManager.GetObject("DeleteUnmanagedFileConfirmation", resourceCulture)); }
        }
        public static string DeleteUnmanagedFileDelete {
            get { return (string)(ResourceManager.GetObject("DeleteUnmanagedFileDelete", resourceCulture)); }
        }
        public static string DeleteUnmanagedFileCancel {
            get { return (string)(ResourceManager.GetObject("DeleteUnmanagedFileCancel", resourceCulture)); }
        }

        public static string PreferredHostsPlaceholder {
            get { return (string)(ResourceManager.GetObject("PreferredHostsPlaceholder", resourceCulture)); }
        }
        public static string PreferredHostsTooltipMoveRight {
            get { return (string)(ResourceManager.GetObject("PreferredHostsTooltipMoveRight", resourceCulture)); }
        }
        public static string PreferredHostsTooltipMoveLeft {
            get { return (string)(ResourceManager.GetObject("PreferredHostsTooltipMoveLeft", resourceCulture)); }
        }
        public static string PreferredHostsTooltipMoveUp {
            get { return (string)(ResourceManager.GetObject("PreferredHostsTooltipMoveUp", resourceCulture)); }
        }
        public static string PreferredHostsTooltipMoveDown {
            get { return (string)(ResourceManager.GetObject("PreferredHostsTooltipMoveDown", resourceCulture)); }
        }
    }
}
